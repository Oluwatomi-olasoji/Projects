/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.system;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.TimerTask;
import java.util.Timer;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author telol
 */
public class testBackup extends javax.swing.JFrame {
    private static Timer timer;
    private static String backupTime = "00:00";
    private static boolean isBackupTaskRunning = false;
    /**
     * Creates new form it_manager
     */
   public testBackup() {
        initComponents();
        checkBackupTimeAndTriggerTask();

    }
 private void checkBackupTimeAndTriggerTask() {
        Thread backupThread = new Thread(() -> {
            while (true) {
                // Get the current time
                Calendar currentTime = Calendar.getInstance();
                int currentHour = currentTime.get(Calendar.HOUR_OF_DAY);
                int currentMinute = currentTime.get(Calendar.MINUTE);

                // Check if the current time matches the backup time
                if (currentHour == Integer.parseInt(backupTime.substring(0, 2))
                        && currentMinute == Integer.parseInt(backupTime.substring(3))) {
                    // Check if the backup task is already running to avoid starting multiple instances
                    if (!isBackupTaskRunning) {
                        isBackupTaskRunning = true;
                        BackupTask myTask = new BackupTask();
                        try {
                            myTask.backupDatabase();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        } finally {
                            isBackupTaskRunning = false;
                        }
                    }
                }

                // Sleep for a short interval before checking again
                try {
                    TimeUnit.MINUTES.sleep(1); // Adjust the interval as needed
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        backupThread.start();
    /**
     * Creates new form testBackup
     */
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Set Bakup Time");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("select hour of the day");

        jLabel2.setText("Select minute");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(146, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(35, 35, 35)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         BackupTask myTask = new BackupTask();
         SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
         Date cuurentDate = new Date();
         String date1 = dateFormat.format(cuurentDate);
        try {
            myTask.backupDatabase();
        } catch (Exception ex) {
            Logger.getLogger(testBackup.class.getName()).log(Level.SEVERE, null, ex);
        }
        int hour = Integer.parseInt(jSpinner1.getValue().toString());
        int minute = Integer.parseInt(jSpinner2.getValue().toString());

        if ((hour < 0 || hour >= 24) || (minute < 0 || minute >= 60)) {
            JOptionPane.showMessageDialog(null, "Invalid input. Hour must be between 0 and 23, and minute must be between 0 and 59.");
        } else {
            try {
                String formattedHour = String.format("%02d", hour);
                String formattedMinute = String.format("%02d", minute);

                // Set backup time
                backupTime = formattedHour + ":" + formattedMinute;

                // Store backup time in the database
                storeBackupTimeInDatabase(date1,backupTime);

                // Start or restart the backup timer
                startBackupTimer();

                JOptionPane.showMessageDialog(rootPane, "Backup time set successfully.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage());
            }
        }
    }

    private static void storeBackupTimeInDatabase(String today, String backupTime) throws SQLException {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos_db", "root", "tomiolasoji");
        PreparedStatement ps = con.prepareStatement("INSERT INTO backup_log VALUES (?,?)");
        ps.setString(1, today);
        ps.setString(2, backupTime);
        int rs = ps.executeUpdate();
        con.close();
    }

    private void startBackupTimer() {
        // Stop existing timer if running
        if (timer != null) {
            timer.cancel();
        }

        // Schedule new timer based on backup time
        timer = new Timer(true);
        timer.scheduleAtFixedRate(new BackupTask(), calculateInitialDelay(), 24 * 60 * 60 * 1000);
    }

    private static long calculateInitialDelay() {
        Calendar calendar = Calendar.getInstance();
        Date currentDate = calendar.getTime();

        // Parse the backup time string to get the hour and minute
        String[] parts = backupTime.split(":");
        int backupHour = Integer.parseInt(parts[0]);
        int backupMinute = Integer.parseInt(parts[1]);

        // Set the backup time on the current date
        calendar.set(Calendar.HOUR_OF_DAY, backupHour);
        calendar.set(Calendar.MINUTE, backupMinute);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        // Check if the backup time has already passed today
        if (calendar.getTime().before(currentDate)) {
            // If it has passed, set it for the next day
            calendar.add(Calendar.DAY_OF_MONTH, 1);
         }
        return calendar.getTimeInMillis() - currentDate.getTime();
    }


    private class BackupTask extends TimerTask {

        @Override
        public void run() {
            try {
                backupDatabase();
                System.out.println("Here");
                JOptionPane.showMessageDialog(null, "Database backup completed at " + new java.util.Date());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private void backupDatabase() throws Exception {
            String desktopPath = System.getProperty("user.home") + "\\Documents";

            String backup = desktopPath + "\\backup.sql";
            try {
                // Build mysqldump command
                ProcessBuilder processBuilder = new ProcessBuilder(
                        "mysqldump",
                        "--host=" + "localhost",
                        "--port=" + "3306",
                        "--user=" + "root",
                        "--password=" + "tomiolasoji",
                        "--databases", "pos_db",
                        "--result-file=" + backup
                );

                // Execute the command
                Process process = processBuilder.start();
                int exitCode = process.waitFor();

                if (exitCode == 0) {
                    System.out.println("Backup completed successfully.");
                } else {
                    System.out.println("Backup failed. Exit code: " + exitCode);
                }
            } catch (Exception e) {
                System.out.println("Backup failed. Exit code: " + e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testBackup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
